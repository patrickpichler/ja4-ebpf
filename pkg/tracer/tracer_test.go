package tracer

import (
	"errors"
	"testing"
)

var tls13Packet = []byte{
	0x16, 0x03, 0x01, 0x02, 0x00, 0x01, 0x00, 0x01,
	0xfc, 0x03, 0x03, 0x3d, 0xbc, 0xfb, 0x02, 0x17,
	0xdf, 0x12, 0xe6, 0x12, 0xfe, 0x0b, 0x26, 0xa4,
	0xc2, 0x02, 0x76, 0x1c, 0xcc, 0x04, 0xf8, 0x07,
	0x9a, 0xe5, 0x74, 0x8b, 0xf3, 0xa5, 0x03, 0xd6,
	0x85, 0x63, 0xb4, 0x20, 0xf5, 0xb7, 0xfd, 0xf6,
	0xe9, 0x1b, 0x60, 0xd3, 0x1b, 0x61, 0x95, 0xac,
	0xdb, 0x5d, 0xa1, 0xe8, 0xa8, 0x42, 0x84, 0xc7,
	0x32, 0xe8, 0xf0, 0x44, 0x98, 0x7e, 0xfc, 0x97,
	0xda, 0xf5, 0x83, 0x7e, 0x00, 0x3e, 0x13, 0x02,
	0x13, 0x03, 0x13, 0x01, 0xc0, 0x2c, 0xc0, 0x30,
	0x00, 0x9f, 0xcc, 0xa9, 0xcc, 0xa8, 0xcc, 0xaa,
	0xc0, 0x2b, 0xc0, 0x2f, 0x00, 0x9e, 0xc0, 0x24,
	0xc0, 0x28, 0x00, 0x6b, 0xc0, 0x23, 0xc0, 0x27,
	0x00, 0x67, 0xc0, 0x0a, 0xc0, 0x14, 0x00, 0x39,
	0xc0, 0x09, 0xc0, 0x13, 0x00, 0x33, 0x00, 0x9d,
	0x00, 0x9c, 0x00, 0x3d, 0x00, 0x3c, 0x00, 0x35,
	0x00, 0x2f, 0x00, 0xff, 0x01, 0x00, 0x01, 0x75,
	0x00, 0x00, 0x00, 0x0b, 0x00, 0x09, 0x00, 0x00,
	0x06, 0x6f, 0x72, 0x66, 0x2e, 0x61, 0x74, 0x00,
	0x0b, 0x00, 0x04, 0x03, 0x00, 0x01, 0x02, 0x00,
	0x0a, 0x00, 0x16, 0x00, 0x14, 0x00, 0x1d, 0x00,
	0x17, 0x00, 0x1e, 0x00, 0x19, 0x00, 0x18, 0x01,
	0x00, 0x01, 0x01, 0x01, 0x02, 0x01, 0x03, 0x01,
	0x04, 0x33, 0x74, 0x00, 0x00, 0x00, 0x10, 0x00,
	0x0e, 0x00, 0x0c, 0x02, 0x68, 0x32, 0x08, 0x68,
	0x74, 0x74, 0x70, 0x2f, 0x31, 0x2e, 0x31, 0x00,
	0x16, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00,
	0x31, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x2a, 0x00,
	0x28, 0x04, 0x03, 0x05, 0x03, 0x06, 0x03, 0x08,
	0x07, 0x08, 0x08, 0x08, 0x09, 0x08, 0x0a, 0x08,
	0x0b, 0x08, 0x04, 0x08, 0x05, 0x08, 0x06, 0x04,
	0x01, 0x05, 0x01, 0x06, 0x01, 0x03, 0x03, 0x03,
	0x01, 0x03, 0x02, 0x04, 0x02, 0x05, 0x02, 0x06,
	0x02, 0x00, 0x2b, 0x00, 0x05, 0x04, 0x03, 0x04,
	0x03, 0x03, 0x00, 0x2d, 0x00, 0x02, 0x01, 0x01,
	0x00, 0x33, 0x00, 0x26, 0x00, 0x24, 0x00, 0x1d,
	0x00, 0x20, 0x5c, 0x07, 0xa3, 0x97, 0xb3, 0xf1,
	0x2b, 0x57, 0x29, 0xd5, 0x87, 0xa3, 0x2d, 0x70,
	0xad, 0xf7, 0xbb, 0x2c, 0x07, 0x00, 0x71, 0x4d,
	0xec, 0x50, 0xda, 0xab, 0x7d, 0x38, 0xdd, 0xfb,
	0x2b, 0x63, 0x00, 0x15, 0x00, 0xb7, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00,
}

func TestParseTLSPacket(t *testing.T) {
	type testCase struct {
		title               string
		packetData          []byte
		expectedFingerprint string
		expectedErr         error
	}

	testCases := []testCase{
    {
    	title:               "Sample TLS 1.3 packet",
    	packetData:          tls13Packet,
    	expectedFingerprint: "t13d3113h2_e8f1e7e78f70_ce5650b735ce",
    },
  }

	for _, tc := range testCases {
		t.Run(tc.title, func(t *testing.T) {
			result, err := parseTLSPacket(tracerEvent{}, tc.packetData)
			if tc.expectedErr != nil {
				if !errors.Is(err, tc.expectedErr) {
					t.Fatalf("expected err `%v`, but got `%v`", tc.expectedErr, err)
				}
				return
			}

			if err != nil {
				t.Fatal("unexpected error:", err)
			}

			if result.String() != tc.expectedFingerprint {
				t.Fatalf("expected `%s`, but got `%s`", tc.expectedFingerprint, result.String())
			}
		})
	}
}
